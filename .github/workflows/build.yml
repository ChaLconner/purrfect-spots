name: Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [development, staging, production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Make build scripts executable
      run: |
        chmod +x build.sh
        chmod +x build-frontend.sh
        chmod +x build-backend.sh
    
    - name: Build project
      run: ./build.sh ${{ matrix.environment }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ matrix.environment }}
        path: |
          frontend/dist/
          backend/venv/
          build-reports/
        retention-days: 7
    
    - name: Deploy to staging
      if: matrix.environment == 'staging' && github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging environment"
        # Add deployment commands here
    
    - name: Deploy to production
      if: matrix.environment == 'production' && github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production environment"
        # Add deployment commands here

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run security scan on frontend
      run: |
        cd frontend
        npm audit --audit-level moderate
        if [ $? -ne 0 ]; then
          echo "Security vulnerabilities found in frontend dependencies"
          exit 1
        fi
    
    - name: Run security scan on backend
      run: |
        cd backend
        pip install safety
        safety check
        if [ $? -ne 0 ]; then
          echo "Security vulnerabilities found in backend dependencies"
          exit 1
        fi

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install backend dependencies
      run: |
        cd backend
        pip install flake8 black isort mypy
    
    - name: Run frontend code quality checks
      run: |
        cd frontend
        npm run type-check
        if [ $? -ne 0 ]; then
          echo "TypeScript type checking failed"
          exit 1
        fi
    
    - name: Run backend code quality checks
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        if [ $? -ne 0 ]; then
          echo "Code linting failed"
          exit 1
        fi
        
        black --check .
        if [ $? -ne 0 ]; then
          echo "Code formatting issues found"
          exit 1
        fi
        
        isort --check-only .
        if [ $? -ne 0 ]; then
          echo "Import sorting issues found"
          exit 1
        fi